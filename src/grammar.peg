// STARTING SYMBOL

start
	= Expression
	
Expression
	= head:Term tail:(__ ("+" / "-" / "<=" / "<" / "=" / ">=" / ">") __ Term)* {
		var returnValue = head;
		for(var i = 0; i < tail.length; i++) {
			var operator;
			switch(tail[i][1]) {
				case "+": operator = Parser.Operator.Sum; break;
				case "-": operator = Parser.Operator.Difference; break;
				case "<": operator = Parser.Operator.Less; break;
				case "<=": operator = Parser.Operator.LessOrEqual; break;
				case "==": operator = Parser.Operator.Equal; break;
				case ">=": operator = Parser.Operator.GreaterOrEqual; break;
				case ">": operator = Parser.Operator.Greater; break;
			}
			returnValue = new Parser.OperatorCall(
				operator,
				returnValue, tail[i][3], expected);
		}
		return returnValue;
	}
	
Term
	= head:Factor tail:(__ ("*" / "/") __ Factor)* {
		var returnValue = head;
		for(var i = 0; i < tail.length; i++) {
			returnValue = new Parser.OperatorCall(
				tail[i][1] == "*" ? Parser.Operator.Product : Parser.Operator.Quotient,
				returnValue, tail[i][3], expected);
		}
		return returnValue;
	}

Factor
	= "(" __ expression:Expression __ ")" { return expression; }
	/ Number
	/ Boolean
	/ FunctionCall
	
FunctionCall
	= GetItemCall
	/ GetCostCall
    / GetFrequencyCall
	/ If
	/ Cost
	/ Table
	
GetItemCall
	= "getItem" __ "(" __ parameter:Expression __ ")" { return new Parser.GetItemFunctionCall(parameter, expected); }
	
GetCostCall
	= "getCost" __ "(" __ item:Expression __ "," __ buyOrSell:( "buy" / "sell" ) __ ")" {
        return new Parser.GetCostFunctionCall(item, buyOrSell, expected);
    } 

GetFrequencyCall
    = "getFrequency" __ "(" __ pageName:PageName __ "," __ entryName:EntryName __ ")" {
        return new Parser.GetFrequencyCall(pageName, entryName, expected);
    }
    
PageName
	= letters:[a-zA-Z_]+ { return letters.join(""); } 
    
EntryName
	= letters:[^,)]+ { return letters.join(""); } 

Cost
	= "cost" __ "(" __ cost:Expression __ ")" { return new Parser.CostNode(cost); }
	
If
	= "if" __ "(" __ condition:Expression __ "," __ trueResult:Expression __ "," falseResult:Expression __ ")" {
		return new Parser.IfCall(condition, trueResult, falseResult);
	}
	
Table
	= "makeTable" __
	"(" __  headHeaderName:HeaderName tailHeaderNames:(__ "," __ HeaderName)* __ ")" __
	"(" __ headExpression:Expression tailExpressions:(__ "," __ Expression)* __ ")" {
		var headers = [headHeaderName];
		for(var i = 0; i < tailHeaderNames.length; i++) {
			headers.push(tailHeaderNames[i][3]);
		}
		var expressions = [headExpression];
		for(var i = 0; i < tailExpressions.length; i++) {
			expressions.push(tailExpressions[i][3]);
		}
		return new Parser.TableNode(headers, expressions, expected);
	}
	
HeaderName
	= letters:[^,()\n]+ { return letters.join(""); } 

Number "number"
	= digits:[-0-9.]+ { return new Parser.Number(digits); }
	
Boolean "boolean"
	= "true" { return new Parser.BooleanConstant(true); }
	/ "false" { return new Parser.BooleanConstant(false); }

__
	= (WhiteSpace / LineTerminatorSequence)*
  
WhiteSpace "whitespace"
	= "\t"
	/ "\v"
	/ "\f"
	/ " "
	/ "\u00A0"
	/ "\uFEFF"
	/ Zs
	
LineTerminatorSequence "end of line"
	= "\n"
	/ "\r\n"
	/ "\r"
	/ "\u2028"
	/ "\u2029"
	
Zs = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]