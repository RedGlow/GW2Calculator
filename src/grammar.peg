// STARTING SYMBOL

start
	= Expression
	
Expression
	= head:Term tail:(__ ("+") __ Term)* {
		var returnValue = head;
		for(var i = 0; i < tail.length; i++) {
			returnValue = new Parser.OperatorCall(Parser.Operator.Sum, returnValue, tail[i][3]);
		}
		return returnValue;
	}
	
Term
	= head:Factor tail:(__ ("*") __ Factor)* {
		var returnValue = head;
		for(var i = 0; i < tail.length; i++) {
			returnValue = new Parser.OperatorCall(Parser.Operator.Product, returnValue, tail[i][3]);
		}
		return returnValue;
	}

Factor
	= "(" __ expression:Expression __ ")" { return expression; }
	/ Integer
	/ FunctionCall
	
FunctionCall
	= GetItemCall
	/ GetCostCall
	/ Cost
	
GetItemCall
	= "getItem" __ "(" __ parameter:Expression __ ")" { return new Parser.GetItemFunctionCall(parameter); }
	
GetCostCall
	= "getCost" __ "(" __ item:Expression __ "," __ buyOrSell:( "buy" / "sell" ) __ ")" { return new Parser.GetCostFunctionCall(item, buyOrSell, expected); } 

Cost
	= "cost" __ "(" __ cost:Expression __ ")" { return new Parser.CostNode(cost); }

Integer "integer"
	= digits:[0-9]+ { return new Parser.Integer(digits); }

__
	= (WhiteSpace / LineTerminatorSequence)*
  
WhiteSpace "whitespace"
	= "\t"
	/ "\v"
	/ "\f"
	/ " "
	/ "\u00A0"
	/ "\uFEFF"
	/ Zs
	
LineTerminatorSequence "end of line"
	= "\n"
	/ "\r\n"
	/ "\r"
	/ "\u2028"
	/ "\u2029"
	
Zs = [\u0020\u00A0\u1680\u2000-\u200A\u202F\u205F\u3000]